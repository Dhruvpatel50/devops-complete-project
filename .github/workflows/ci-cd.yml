name: CI / CD Pipeline with DevSecOps

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  pull-requests: write
  id-token: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create results directory
        run: mkdir -p results

      - name: Run Gitleaks Scan
        uses: zricethezav/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          report-format: sarif
          report-path: results/gitleaks.sarif
        continue-on-error: true

      - name: Ensure Gitleaks SARIF exists
        if: always()
        run: |
          if [ ! -s results/gitleaks.sarif ]; then
            echo "Creating valid empty SARIF for Gitleaks..."
            cat <<-EOF > results/gitleaks.sarif
{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Gitleaks",
          "version": "2.0.0",
          "informationUri": "https://github.com/zricethezav/gitleaks"
        }
      },
      "results": []
    }
  ],
  "\$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json"
}
EOF
          fi

      - name: Upload Gitleaks Report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results/gitleaks.sarif
          category: gitleaks
          wait-for-processing: true

  build-and-test:
    name: Build, Test & Security Scan
    needs: security-scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, feedback-service, messaging-service, swap-service, user-service]

    steps:
      - name: Set lowercase owner
        run: echo "OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./services/${{ matrix.service }}
        run: |
          if [ -f package.json ]; then
            npm install --silent
          else
            echo "No package.json â€” skipping install"
          fi

      - name: Run ESLint Security Scan
        working-directory: ./services/${{ matrix.service }}
        run: |
          if [ -f package.json ]; then
            npx eslint . --format=sarif --output-file=eslint.sarif || true
          fi

      - name: Ensure ESLint SARIF exists
        if: always()
        working-directory: ./services/${{ matrix.service }}
        run: |
          if [ ! -s eslint.sarif ]; then
            echo "Creating valid ESLint SARIF placeholder..."
            cat <<EOF > eslint.sarif
{
  "version": "2.1.0",
  "runs": [{
    "tool": { "driver": { "name": "ESLint", "version": "8.x" } },
    "results": []
  }]
}
EOF
          fi

      - name: Upload ESLint Scan Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./services/${{ matrix.service }}/eslint.sarif
          category: eslint
          wait-for-processing: true

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif
        continue-on-error: true

      - name: Ensure Snyk SARIF exists
        if: always()
        run: |
          if [ ! -s snyk.sarif ]; then
            echo "Creating valid Snyk SARIF placeholder..."
            cat <<EOF > snyk.sarif
{
  "version": "2.1.0",
  "runs": [{
    "tool": { "driver": { "name": "Snyk" } },
    "results": []
  }]
}
EOF
          fi

      - name: Upload Snyk Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk
          wait-for-processing: true

      - name: Run tests
        working-directory: ./services/${{ matrix.service }}
        run: |
          if [ -f package.json ]; then
            npm test --silent || true
          fi

  build-and-push:
    name: Build, Scan & Push Docker Images
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, feedback-service, messaging-service, swap-service, user-service]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set lowercase owner
        run: echo "OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build local image
        uses: docker/build-push-action@v4
        with:
          context: ./services/${{ matrix.service }}
          load: true
          tags: ${{ matrix.service }}:${{ github.sha }}

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Ensure Trivy SARIF exists
        if: always()
        run: |
          if [ ! -s trivy-results.sarif ]; then
            echo "Creating valid Trivy SARIF placeholder..."
            cat <<EOF > trivy-results.sarif
{
  "version": "2.1.0",
  "runs": [{
    "tool": { "driver": { "name": "Trivy" } },
    "results": []
  }]
}
EOF
          fi

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: trivy
          wait-for-processing: true

      - name: Push final image
        uses: docker/build-push-action@v4
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}

  terraform:
    name: Terraform (init / plan / apply)
    runs-on: ubuntu-latest
    env:
      TF_ROOT: infra
    if: >
      github.event_name == 'push' && (
        contains(join(github.event.commits.*.added, ' '), 'infra/') ||
        contains(join(github.event.commits.*.modified, ' '), 'infra/') ||
        contains(join(github.event.commits.*.removed, ' '), 'infra/')
      ) || github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"

      - name: Terraform Init
        working-directory: ${{ env.TF_ROOT }}
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: ${{ env.TF_ROOT }}
        run: terraform plan -input=false -no-color -out=tfplan || true

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ${{ env.TF_ROOT }}
        run: terraform apply -auto-approve
