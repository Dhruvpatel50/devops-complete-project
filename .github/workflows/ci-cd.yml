name: CI / CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  pull-requests: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build & Test (matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, feedback-service, messaging-service, swap-service, user-service]
    steps:
      - name: Set lowercase owner
        run: echo "OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js (if needed)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./services/${{ matrix.service }}
        run: |
          if [ -f package.json ]; then
            # Use npm ci when lockfile exists (reproducible); otherwise fall back to npm install
            if [ -f package-lock.json ]; then
              echo "package-lock.json found — using npm ci"
              npm ci --silent --no-audit --no-fund
            else
              echo "package-lock.json not found — using npm install"
              npm install --silent --no-audit --no-fund
            fi
          else
            echo "No package.json — skipping install"
          fi

      - name: Run tests
        working-directory: ./services/${{ matrix.service }}
        run: |
          if [ -f package.json ]; then
            npm test --silent || true
          fi

  build-and-push:
    name: Build & Push Docker Images
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, feedback-service, messaging-service, swap-service, user-service]
    steps:
      - name: Set lowercase owner
        run: echo "OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}
          file: ./services/${{ matrix.service }}/Dockerfile

  terraform:
    name: Terraform (init / plan / apply)
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' && (
        contains(join(github.event.commits.*.added, ' '), 'infra/') ||
        contains(join(github.event.commits.*.modified, ' '), 'infra/') ||
        contains(join(github.event.commits.*.removed, ' '), 'infra/')
      ) || github.event_name == 'pull_request'
    env:
      TF_ROOT: infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"

      - name: Terraform Init
        working-directory: ${{ env.TF_ROOT }}
        run: terraform init -input=false

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_ROOT }}
        run: |
          terraform plan -input=false -no-color -out=tfplan || true
          terraform show -no-color tfplan > plan.txt || true
          echo "PLAN<<EOF" >> $GITHUB_OUTPUT
          cat plan.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment Plan on PR (optional)
        if: github.event_name == 'pull_request'
        uses: actions-ecosystem/action-create-comment@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Terraform plan for ${{ github.ref }}:
            ${{ steps.plan.outputs.PLAN }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ${{ env.TF_ROOT }}
        run: terraform apply -auto-approve